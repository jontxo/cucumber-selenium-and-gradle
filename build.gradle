buildscript {
    repositories {
        maven {
            url "http://repo.bodar.com"
        }
        jcenter()
    }
    dependencies {
			    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.9'
			    classpath 'de.undercouch:gradle-download-task:2.1.0'
			    classpath 'com.commercehub:gradle-cucumber-jvm-plugin:0.6'
    }
}




// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'cucumber-jvm'

//sourceSets 
//{
//	main 
//	{
//		java 
//		{
//	    	srcDirs = ['src/main/java', 'src/test/java','src/cucumber/resources/steps'] // want to override the default
//	    }
//	    resources 
//	    {
//	        // cannot omit the '=' because this would try to
//	         // index into the 'srcDirs' value
//	        srcDirs = ['Resources', 'other/resources', 'src/main/resources']
//	         include '*.xml', '*.properties'
//			// or: '**/*.xml', '**/*.properties'
//			output.resourcesDir = 'Resources'
//        }
//	}
//}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {

	// Selenium dependencies
	compile group: 'junit', name: 'junit', version: '4.+'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.+'
	compile group: 'commons-io', name: 'commons-io', version: '1.3.+'
    compile group: 'junit', name: 'junit', version: '4.+'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.+'
    compile group: 'org.testng', name: 'testng', version:'6.9.+'
    compile group: 'org.uncommons', name: 'reportng', version: '1.1.+'

	// cucumber dependencies
	compile group: 'info.cukes', name: 'cucumber-groovy', version: '1.2.+'
	//compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.+'
	//compile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.+'
	compile group: 'info.cukes', name: 'cucumber-jvm', version: '1+'
    compile group: 'info.cukes', name: 'cucumber-jvm-deps', version:'1+'
    compile group: 'info.cukes', name: 'cucumber-java', version:'1+'
    compile group: 'info.cukes', name: 'cucumber-junit', version:'1+'
    compile group: 'info.cukes', name: 'cucumber-core', version:'1+'

	// groovy dependencies
	compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.+'

    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.13'

	// TestNG
	compile group: 'org.testng', name: 'testng', version: '6.9.+'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit:4.12'
}

import de.undercouch.gradle.tasks.download.Download

// Download the firebug addin in the build folder
task downloadFirebug(type: Download) {
  src 'https://addons.mozilla.org/firefox/downloads/latest/1843/addon-1843-latest.xpi?src=dp-btn-primary'
  dest new File(buildDir, 'firebug-2.0.16-fx.xpi')
  quiet false
  overwrite true
  onlyIfNewer true
  compress false
  println "Download firebug addin: " + src
}

// Download the ie driver zip
task downloadIEDriverZip(type: Download){
  src 'http://selenium-release.storage.googleapis.com/2.52/IEDriverServer_Win32_2.52.0.zip'
  dest new File(buildDir, 'IEDriverServer.zip')
  quiet false
  overwrite true
  onlyIfNewer true
  compress false
  println "Download IE driver: " + src
}

// Unzip the ie driver in the build folder
task downloadAndUnzipIEDriver(dependsOn: downloadIEDriverZip, type: Copy){
  println "Unzip IE driver: " + downloadIEDriverZip.dest
  from zipTree(downloadIEDriverZip.dest)
  into buildDir
}

import org.gradle.internal.os.OperatingSystem;

task downloadChromeDriverZip(type: Download){
  if (OperatingSystem.current().isMacOsX()) 
  {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_mac32.zip'
  }
  else if (OperatingSystem.current().isLinux()) 
  {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_linux64.zip'
  }
  else 
  {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_win32.zip'
  }
  
  dest new File(buildDir, 'chromedriver.zip')
  quiet false
  overwrite true
  onlyIfNewer true
  compress false
  println "Download Chrome driver: " + src + " to " + dest
}

task downloadAndUnzipChromeDriver(dependsOn: downloadChromeDriverZip, type: Copy){
  println "Unzip Chrome driver: " + downloadChromeDriverZip.dest
  from zipTree(downloadChromeDriverZip.dest)
  into buildDir
}

task chrome(type: Test, dependsOn: downloadAndUnzipChromeDriver){
  String extension = OperatingSystem.current().isWindows() ? '.exe' : ''
  File chromeDriver = new File(buildDir, 'chromedriver' + extension);
  systemProperties['webdriver.chrome.driver'] = chromeDriver
  println "Use Chrome driver: $chromeDriver"

  systemProperties['webdriver.chrome.driver'] = chromeDriver
}

task firefox(type: Test){
  systemProperties['selenide.browser'] = 'firefox'
}


addCucumberSuite 'cucumberTest'

cucumber {
    maxParallelForks = 3
}

// In order to work, it has to exist a sources folder with the name src/cucumberTest/sources
// this directory has to have a package with the name features containing the features that will be executed
// The config.properties file has to be in the same folder: src/cucumberTest/sources
cucumberTest {
	systemProperties['user.dir'] = projectDir
    stepDefinitionRoots = ['classpath:cucumber/steps']
    junitReport = true
    isStrict = true
}

repositories {
    jcenter()
}

dependencies {
    cucumberTestCompile 'info.cukes:cucumber-java:1.2.2'
}
